/** eslint-env jest */

import { BalancedTree } from '../../src/tree/BalancedTree'
import { toArray } from '../../src/toArray'

function numberComparator (left : number, right : number) : number {
  return left - right
}

describe('#BalancedTree', function () {
  describe('#constructor', function () {
    it('instantiate a new balanced tree', function () {
      const tree : BalancedTree<number> = new BalancedTree(numberComparator, 5)

      expect(tree.order).toBe(5)
      expect(tree.comparator).toBe(numberComparator)
      expect(tree.size).toBe(0)
      expect(toArray(tree)).toEqual([])
    })
  })

  describe('#push', function () {
    it('add an element in a tree', function () {
      const tree : BalancedTree<number> = new BalancedTree(numberComparator, 5)

      expect(tree.size).toBe(0)
      expect(toArray(tree)).toEqual([])

      tree.push(5)

      expect(tree.size).toBe(1)
      expect(toArray(tree)).toEqual([5])
    })

    it('is able to fill leaf nodes', function () {
      const tree : BalancedTree<number> = new BalancedTree(numberComparator, 5)

      expect(tree.size).toBe(0)
      expect(toArray(tree)).toEqual([])

      tree.push(5)
      tree.push(5)
      tree.push(2)
      tree.push(8)

      expect(tree.size).toBe(4)
      expect(toArray(tree)).toEqual([2, 5, 5, 8])
    })

    it.only('is able to split leaf nodes', function () {
      const tree : BalancedTree<number> = new BalancedTree(numberComparator, 5)

      expect(tree.size).toBe(0)
      expect(toArray(tree)).toEqual([])

      tree.push(5)
      tree.push(5)
      tree.push(2)
      tree.push(8)
      tree.push(1)
      tree.push(3)
      
      console.log('\n\r' + tree.xml())

      expect(tree.size).toBe(6)
      expect(toArray(tree)).toEqual([1, 2, 3, 5, 5, 8])
    })

    it('is able to balance itself', function () {
      const tree : BalancedTree<number> = new BalancedTree(numberComparator, 5)

      expect(tree.size).toBe(0)
      expect(toArray(tree)).toEqual([])

      const values : number[] = [
        2, 8, 3, 1, 6, 4, 9, 5, 6, 3, 2, 1, 1, 3, 5, 11, -5, 6, 0, 0, 0, 0,
        -6, 10, 15, -8, -8, -9, -9, -9, -1, 2, 2, 3, 4, 6, 8
      ]

      for (const value of values) {
        tree.push(value)
        console.log('Adding ' + value + ' : \n\r' + tree.xml())
      }

      values.sort(numberComparator)

      console.log('\n\r' + tree.xml())

      expect(tree.size).toBe(values.length)
      expect(toArray(tree)).toEqual(values)
    })
  })
})
